#!/usr/bin/env python3
from boss_drp.utils import load_env
from boss_drp.prep.spplan_trace import spplanTrace

from sdss_access import Access

import argparse

if __name__ == "__main__":

    parser = argparse.ArgumentParser(description='Produces spPlanTrace')
    
    General = parser.add_argument_group(title='General', description='General Setup Options')
    General.add_argument('--topdir',         help='Topdir to override the BOSS_SPECTRO_REDUX environmental variable')
    General.add_argument('--run2d',          help='Run2d to environmental variable')
    General.add_argument('--lco',            help='Build Run files for LCO', action='store_true')
    General.add_argument('--apo',            help=argparse.SUPPRESS, action='store_true')
    General.add_argument('--logfile',        help='Optional logfile (Including path)')
    General.add_argument('--verbose',        help='Provide information about nonutlized frames',action='store_true')
    General.add_argument('-c', '--clobber',  help='overwrites previous plan file', action='store_true')
    General.add_argument('--release',        help='sdss_access data release (defaults to sdsswork), required if you do not have proprietary access, otherwise see https://sdss-access.readthedocs.io/en/latest/auth.html#auth', default='sdsswork')
    General.add_argument('--remote',         help='allow for remote access to data using sdss-access', action='store_true')
    General.add_argument('--override_manual',help='Override/clobber manually edited plan', action='store_true')

    
    
    Filter_grp = parser.add_argument_group(title='MJD/Field Filtering', description='MJD/Field Filtering Options')
    Filter_grp.add_argument('--mjd',  nargs='*',  help = 'Use data from these MJDs.')
    Filter_grp.add_argument('--mjdstart',         help = 'Starting MJD')
    Filter_grp.add_argument('--mjdend',           help = 'Ending MJD')
    
    args = parser.parse_args()

    if args.apo:
        args.lco = False

    if args.release != 'sdsswork':
        if args.release not in Access().get_available_releases():
            parser.exit(status=0, message='ERORR: '+args.release+' is not a valid release')
    else:
        if args.remote is True:
            try:
                Access().remote()
            except:
                parser.exit(status=0, message='ERROR: No netrc file found. see https://sdss-access.readthedocs.io/en/latest/auth.html#auth')


    if args.run2d is None:
        args.run2d = load_env('RUN2D')
    if args.topdir is None:
        args.topdir = load_env('BOSS_SPECTRO_REDUX')

    args.no_remote = not args.remote

    spplanTrace(**vars(args))
