#!/usr/bin/env python

import os, os.path, sys, time, getopt
import sxpar
from glob import glob

""" 
rundaily:

Written by Gary Kushner (LBL).  Jan 2010.
"""

####
def usage():
    """Display usage and exit"""
	
    print("usage:")
    print("rundaily -m path -s path -p path -l -i")
    print(" ")
    print("""
    rundaily is meant to be run on rieman via cron.  It will wait until the next MJD is
    downloaded and then run a script.  It will output the status or errors to stdout.
	
    Note : you must "setup trac" before running this script.  Also, anything the
           given script might need.

    The parameters are:

     -m path to file to store next mjd to look for
     -s path to file to exec on new mjd.  The file will be run like this "file $MJD"
     -p path to getWikiMJD password file
     -l run lco
     -d run Daily

    NOTE:  To avoid upsetting cron, rundaily always exists with zero.
""")

    sys.exit(0)
	
	
####
def screamAndDie(msg):
    """Print a message to stdout and then exit"""

    print(msg)
    sys.exit(0)
	
####
def parseCmdLine(args):
    """Parse command line arguments and return a (mjdFile, scriptFile, pwFile)"""

    # parse with options
    try:
        opts, pargs = getopt.gnu_getopt(args, "m:s:p:ld")
    except:
        usage()

    if len(pargs) != 0:
        print("wrong number of command line arguments.\n")
        usage()

    mjdFile    = ""
    scriptFile = ""
    pwFile     = ""
    lco        = False
    daily        = False

    #   Fill in the config
    for (opt, value) in opts:
        if opt == "-m": mjdFile = value
        if opt == "-s": scriptFile = value
        if opt == "-p": pwFile = value
        if opt == "-l": lco = True
        if opt == "-d": daily = True
    if mjdFile == "" or scriptFile == "" or pwFile == "":
        usage()

    return (mjdFile, scriptFile, pwFile, lco, daily)


def get_emails(mjdFile):
    """Return list of emails for logs"""
    return(open(os.path.join(os.path.dirname(mjdFile),'emails')).read().splitlines())

####
def getMJD(mjdFile):
    """Return the single number stored in the given file"""

    return int(open(mjdFile).read())
	
def getLastMJD(lco,verbose=True):
    if lco: DAILY_BOSS_SPECTRO_DATA='BOSS_SPECTRO_DATA_S'
    else: DAILY_BOSS_SPECTRO_DATA='BOSS_SPECTRO_DATA_N'
    
    path = os.path.join(os.getenv(DAILY_BOSS_SPECTRO_DATA), '?????')
    def get_key(fp):
        if not os.path.isdir(fp): return(0)
        filename = os.path.basename(fp)
        int_part = filename.split()[0]
        return(int(int_part))
    files = sorted(glob(path),key=get_key)
    mjd = os.path.basename(files[-1])
    if verbose: 
        print('Latest MJD %s' % mjd, ' at %s' % files[-1])
    return mjd
    
    
####
def incrementMJD(mjdFile):
    """Increment the single number in the given file by one"""

    f = open(mjdFile, "r+")
    mjd = int(f.read()) + 1
    f.seek(0)
    f.write(str(mjd))
    f.truncate()
    f.close()

    print("Next MJD to wait for will be " + str(int(mjd)))
		 
####
def runScript(scriptFile, mjd, lco, daily):
    """Run the script 'scriptFile $MJD'"""

    cmd = [scriptFile, '-m', str(mjd)]
    msg = "Running script " + scriptFile + " " + str(mjd)
    if lco:
        cmd.append('-l')
        msg+=" for LCO data"
    if daily:
        cmd.append('-d')
        msg+=" for DAIlY"
    
    print(msg)
    os.spawnv(os.P_NOWAIT, scriptFile, cmd)

####
def nextMJD(mjd, pwFile, lco):
    """Return true if the given MJD has been transfered"""
    
    if lco: DAILY_BOSS_SPECTRO_DATA='BOSS_SPECTRO_DATA_S'
    else: DAILY_BOSS_SPECTRO_DATA='BOSS_SPECTRO_DATA_N'
    
    path = os.path.join(os.getenv(DAILY_BOSS_SPECTRO_DATA), str(mjd))
    print("Looking for %s" % path)
    return os.path.isdir(path)
	
####
def skipMJD(lco, daily, formsg, mjdFile, testmjd, scriptFile):
    while( int(testmjd) > int(getMJD(mjdFile))):
        for email in get_emails(mjdFile):
            if len(email) == 0: continue
            os.spawnv(os.P_WAIT, '/usr/bin/mail',
                  ['/usr/bin/mail', '-s', '"UUBATCHPBS Skipping '+str(getMJD(mjdFile))+formsg+'"',
                   email] )
        print("Skipping MJD"+formsg+": " + str(getMJD(mjdFile)))
        incrementMJD(mjdFile)
        testmjd = getLastMJD(lco,verbose=False)
        mjd = getMJD(mjdFile)
        if nextMJD(getMJD(mjdFile), '', lco):
            print("New MJD"+formsg+" transfered: " + str(mjd) + ".")
            incrementMJD(mjdFile)
            runScript(scriptFile, mjd, lco, daily)
            return(testmjd)
    return(testmjd)
        
####
def main(args):
    (mjdFile, scriptFile, pwFile, lco, daily) = parseCmdLine(args)
	
    #	Some early sanity checks
    if not os.path.exists(mjdFile):
        screamAndDie("Can not find MJD file: " + mjdFile)
    if not os.path.exists(scriptFile):
        screamAndDie("Can not find script file: " + scriptFile)
    if not os.path.exists(pwFile):
        screamAndDie("Can not find password file: " + pwFile)

    #	Is the next MJD here?
    mjd = getMJD(mjdFile)
    formsg=''
    if lco: formsg += ' lco'
    if daily: formsg += ' DAILY'
    if len(formsg) > 0: formsg=' for'+formsg
    if nextMJD(mjd, pwFile, lco):
        print("New MJD"+formsg+" transfered: " + str(mjd) + ".")
        incrementMJD(mjdFile)
        runScript(scriptFile, mjd, lco, daily)
    else:
        testmjd = getLastMJD(lco)
        if int(testmjd) > int(mjd):
            mjd = skipMJD(lco, daily, formsg, mjdFile, testmjd, scriptFile)
        else:
            print("MJD"+formsg+" "+ str(mjd) + " is not here yet.")
	

#### Start of script

if __name__=='__main__':
    main(sys.argv[1:])
		
