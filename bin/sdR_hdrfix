#!/usr/bin/env python3
from boss_drp.sos.sdR_hdrfix import fixhdr, getLastMJD
from os import getenv
from os import path as ptt
from sys import argv
import argparse
import platform

try:
    from termcolor import colored
except:
    def colored(text,color):
        return(text)

if __name__ == '__main__' :
    msg  = "\n    "+colored("At current only use if still exposing or don't run SOS after\n     (skip and note in Night Log (and/or email) if uncertain)",'red')
    msg2 = "\n    "+colored("At current only use if still exposing or don't run SOS after for Science Frames\n     (skip and note in Night Log (and/or email) if uncertain)",'red')


    formatter = lambda prog: argparse.HelpFormatter(prog,max_help_position=60)

    parser = argparse.ArgumentParser(
            prog=ptt.basename(argv[0]),
            description='Create the files used by the pipeline to fix the header meta data of the BOSS exposures',
            formatter_class=formatter,
            epilog='one or more update options are required')
    
    parser.add_argument('expid', help='Exposure ID')
    parser.add_argument('--mjd', '-m', help = 'mjd of file (default: latest MJD)', required=False, default = None)
    if 'sdss5' not in platform.node():
        if getenv('OBSERVATORY') is None:
            obs_req = True
            req = parser.add_argument_group('Required arguments')
            req.add_argument('--obs', help = 'Set Observatory', required=True, choices=['APO','LCO'])
        else:
            obs_req = False
            parser.add_argument('--obs', help = 'Set Observatory (default:'+getenv('OBSERVATORY')+')', default=getenv('OBSERVATORY'), required=False, choices=['APO','LCO'])
    else:
        parser.add_argument('--obs', help=argparse.SUPPRESS)

    parser.add_argument('--clobber', help='clobber sdHdrFix file', action='store_true')

    if 'sdss5' in platform.node():
        cam = ['b1','r1','??'] if getenv('OBSERVATORY').lower == 'apo' else ['b2','r2','??']
        carts = ['FPS-N'] if getenv('OBSERVATORY').lower == 'apo' else ['FPS-S']
    else:
        cam = ['b1','b2','r1','r2','??']
        carts = ['FPS-S', 'FPS-N']

    parser.add_argument('--cameras', type=str.lower, choices=cam, default='??', help='Cameras for hdr update (?? for all cameras) [default:??]')

    qualgroup = parser.add_argument_group("Optional Quality Update (exclusive)"+msg2)
    qualgroup.add_argument('--bad', '-b', help = 'flag as quality=bad', action = 'store_true')
    qualgroup.add_argument('--test', '-t', help = 'flag as quality=test', action = 'store_true')

    lampgroup = parser.add_argument_group('Optional lamp/screen keys to Update (1:on, 0:off)')
    lampgroup.add_argument('--FF',      type=str, nargs=4, choices=['0','1'], help='Flat Field Lamp')
    lampgroup.add_argument('--FFS',     type=str, nargs=8, choices=['0','1'], help='Flat Field Screen')
    lampgroup.add_argument('--NE',      type=str, nargs=4, choices=['0','1'], help='Ne arc lamp')
    if 'sdss5' in platform.node():
        if getenv('OBSERVATORY').lower == 'apo':
            lampgroup.add_argument('--HGCD',    type=str, nargs=4, choices=['0','1'], help='HgCd arc Lamp')
        else:
            lampgroup.add_argument('--HEAR',    type=str, nargs=4, choices=['0','1'], help='HeAr arc Lamp')
    else:
        lampgroup.add_argument('--HGCD',    type=str, nargs=4, choices=['0','1'], help='HeCd arc Lamp')
        lampgroup.add_argument('--HEAR',    type=str, nargs=4, choices=['0','1'], help='HeAr arc Lamp')
    lampgroup.add_argument('--arc',       help = 'short cut to set all relevant arc lamps to 1 1 1 1', action='store_true')
    lampgroup.add_argument('--flat',      help = 'short cut to set FF = 1 1 1 1 & FFS =  1 1 1 1 1 1 1 1 ', action = 'store_true')
    lampgroup.add_argument('--hartmann',type=str.capitalize, choices = ['Out', 'Right', 'Left', 'Closed'], help='Hartmann Door Status')

    commongroup = parser.add_argument_group("Optional Common keys to Update"+msg2)
    commongroup.add_argument('--quality', type=str.lower, choices=['excellent', 'test', 'bad'], help = 'Set Quality flat of exposures')

    specialgroup = parser.add_argument_group("Optional Specialized Keys to Update "+msg)
    specialgroup.add_argument('--flavor',  type=str.lower, choices=['bias','dark','flat','arc','science','smear'], help='Type/Flavor of exposure')
    specialgroup.add_argument('--exptime', type=float, help='Exposure length (s)')
    specialgroup.add_argument('--tai-beg', type=float, help='Starting time (tai) of exposure')
    specialgroup.add_argument('--cartid',  type=str.upper, choices=carts, help='Cartridge Mounted')
    specialgroup.add_argument('--fieldid', type=int, metavar='FIELDID',  help="FieldID")
    specialgroup.add_argument('--confid',  type=int, metavar='CONFIGID', help="ConfigureID")
    specialgroup.add_argument('--designid',type=int, metavar='DESIGNID', help='DesignID')

    keygroup = parser.add_argument_group("Manually update a key "+msg)
    keygroup.add_argument('--key', '-k', help = 'header keyword to update (required if value is set)', default=None)
    keygroup.add_argument('--value', '-v', help = 'updated header keyword value (required if key is set)', default=None)

    args =  parser.parse_args()
    
    if args.mjd is None:
        args.mjd = str(getLastMJD(silent=True))


    if 'sdss5' in platform.node():
        args.obs = getenv('OBSERVATORY')


    if args.arc:
        if args.obs.lower == 'apo':
            args.NE = ['1','1','1','1']
            args.HGCD = ['1','1','1','1']
        else:
            args.NE = ['1','1','1','1']
            args.HEAR = ['1','1','1','1']
    if args.flat:
            args.FF  = ['1','1','1','1']
            args.FFS = ['1','1','1','1','1','1','1','1']
 
    if args.key is not None:
        if args.key.upper in ['EXPOSURE', 'MJD']:
            print('ERROR: Invalid Keys. Exiting')
            exit()

    updates = {}
   
    if args.bad:
        updates = {'quality': 'bad'}
    elif args.test:
        updates = {'quality': 'test'}
    else:
        for key in vars(args).keys():
            if key in ['expid', 'mjd', 'obs', 'clobber', 'bad', 'test', 'key',
                       'value','rerun', 'cameras', 'observer', 'arc', 'flat']: continue
            if vars(args)[key] is None: continue
            if type(vars(args)[key]) == list:
                updates[key] = ' '.join(vars(args)[key])
            else:
                updates[key] = str(vars(args)[key])
        if args.key is not None and args.value is not None:
            updates[args.key] = args.value

    
    for key in list(updates.keys()):
        if key in ['fieldid', 'confid', 'designid', 'flavor', 'exptime', 'tai-beg', 'cartid']:
            confirm = ''
            while confirm.lower() != 'y':
                confirm = input('Do you really want to edit '+key+'? (y/[n]) ')
                if confirm.lower() == '': confirm = 'n'
                if confirm.lower() == 'n':
                    updates.pop(key)
                    print('Skipping '+key)
                    break
                
    if len(updates) == 0:
        parser.print_help()
    else:
        fixhdr(args.expid, updates, mjd = args.mjd, obs = args.obs, clobber=args.clobber,
               cameras=args.cameras)

