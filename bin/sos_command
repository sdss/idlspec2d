#!/usr/bin/env bash
#
#  Run the sos commands.  This command is called from the sos daemon when new files are
#  written by the icc.  The commands run are:
#
#  Check to make sure the file is a BOSS exposure.  Return if not.  [STEP SKIPPED]
#  Check to make sure the file is no a test expose.  Return if it is.
#  Call IDL sosreduce
#  Check if exposure is a science exposure.  Return if not.
#  Call script to get S/N
#  Call script to update plateDb
#
#  Written by Gary Kushner (LBL).  Dec 2009.

###
###  Functions
###

function usage
{
    local execName=$(basename $0)
    ( 
    echo "usage: $execName -f name -i path -p name -l path -s path -m 00000 [-d -e]"
    echo " "
    echo "   -f    Fits file name"
    echo "   -i    Fits file directory path"
    echo "   -p    Plugmap file name"
    echo "   -l    Plugmap file directory path"
    echo "   -s    SOS Directory"
    echo "   -m    MJD"
    echo " "
    echo "   -d    Dry run."
    echo "   -e    FPS mode"
    echo "   -a    no cal mode"
    echo "   -n    no OpsDB upload"
    echo "   -v    calculate SN2_v2 (SDSS-V)"
    echo " "
    echo "All parameters except -d, -a, and -e are required, FPS mode is set by default."
    echo "Normally $execName will be called by sos_runnerd."
    ) >&2
    exit 1
}

function screamAndDie
{
    echo "Failed: $*"

    echo "Goodbye from sos_command!"
    exit 0
}

function die
{
    echo $*
    
    echo "Goodbye from sos_command."
    exit 0
}

function printAndRun
{
    echo "$*"

    if "$dryMode"; then
        return
    fi
    
    # Silently do nothing
    if test "_$*" = "_"; then
        return
    fi

    eval "$@"
    if test $? -ne 0; then
        screamAndDie "failed running $*"
    fi
}


# Make the IDL sosreduce command to execute
#
#  Uses: fitsName, inDir, plugName, plugDir, MJD, SOSDir
#
#   echos the command so use $(makeCommand b1)
function makeSOSCommand
{
    echo "idl -e \"sosreduce, '$fitsName', $noreject $sdssv_sn2 $sn2_15 $fpsMode $nocalMode $arc2trace $nolock $diskcheck $forcea2t indir='$inDir', plugfile='$plugName', outdir='$SOSDir/$MJD', copydir='$SOSDir/combined', plugdir='$plugDir'\""
}

# Turn a fits science frame name into an sosreduce output file name.  For example
#     sdR-b1-00104994.fit -> sci-3587-b1-00104994.fits
# In order to do this, it must read the fits science frame to get the plugid.
#
# Input : $1 - fits file name
#
# Output : echo : sosreduce science output name
function getSOSSciName
{
    fname=$(basename $1)
    confID=$(sxpar.py $1 CONFID)
    if  (( 1000000 > $confID)); then
        confID=$(printf %06.0f $confID)
    fi
    fieldid=$(sxpar.py $1 FIELDID)
    camera=${fname: 4:2}
    exposure=${fname: 7:8}

    echo sci-$confID-$camera-$exposure.fits
}

function getCamera
{
    fname=$(basename $1)
    camera=${fname: 4:2}
    echo $camera
}

###
###  Parse Options
###

dryMode=false
fpsMode=""
nocalMode=""
fitsName=""
inDir=""
plugName=""
plugDir=""
MJD=""
SOSDir=""
nodb=false
noreject=""
sdssv_sn2=""
sn2_15=""
arc2trace=""
a2t=false
forcea2t=""
diskcheck=""
pause='0'
nolock=""
while getopts "f:i:p:l:s:m:adenrbvtoj:cuh" argname; do
    case $argname in
          f) fitsName=$OPTARG ;;
          i) inDir=$OPTARG ;;
          p) plugName=$OPTARG ;;
          l) plugDir=$OPTARG ;;
          s) SOSDir=$OPTARG ;;
          m) MJD=$OPTARG ;;
          d) dryMode=true ;;
          e) fpsMode=" /fps, " ;;
          a) nocalMode=" /nocal, " ;;
          n) nodb=true ;;
          r) noreject=" /noreject," ;;
          v) sdssv_sn2=" /sdssv_sn2, " ;;
          b) sn2_15=" /sn2_15, " ;;
          t)
             arc2trace=" /arc2trace, "
             a2t=true
             ;;
          o)
             arc2trace=" /arc2trace, "
             a2t=true
             forcea2t=" /forcea2t, "
             ;;
          c) diskcheck=" /no_diskcheck, " ;;
          j) pause=$OPTARG ;;
          u) nolock=" /no_lock, " ;;
          h) usage ;;
          *) usage
    esac
done
shift $((OPTIND-1))

###	Make sure we have everything we need

if  [ -z $fitsName ] || [ -z $inDir ] || [ -z $plugName ] || [ -z $plugDir ] ||
    [ -z $SOSDir ] || [ -z $MJD ]; then
    echo " "
    echo "Missing Required Parameter!"
    echo " "
    usage
fi

###
### Here is the SOS Command !
###

#    If this is not an excellend file, we're done
if  [ "$(filecheck excellent $inDir/$fitsName)" == "false" ]; then
    die "$inDir/$fitsName is not an excellent exposure ($(sxpar.py $inDir/$fitsName quality))."
fi
echo "$inDir/$fitsName is excellent"

#    Call sosreduce
if [[ $pause != '0' ]]; then
    echo "Sleeping for $pause sec before starting $fitsName reduction due to IDL License"
    sleep $pause
fi
printAndRun $(makeSOSCommand)

#    If this isn't a science file, we're done
if [ "$(filecheck science $inDir/$fitsName)" == "false" ]; then
        echo "$inDir/$fitsName is not a science frame."
        if "$a2t"; then
            if [ "$(filecheck arc $inDir/$fitsName)" == "true" ]; then
                export BOSS_SPECTRO_REDUX=${SOSDir}/${MJD}
                printAndRun boss_arcs_to_traces --mjd ${MJD} --no_hash --obs ${OBSERVATORY~~} --cams $(getCamera $inDir/$fitsName) --vers sos --threads 0 --sosdir ${SOSDir} --fitsname ${fitsName}
            fi
        fi
else
        echo "$inDir/$fitsName is a science frame"

#    Update plateDB with (s/n)^2
        printAndRun "echo Is a Science Frame"
        if "$nodb" ; then
            echo "Skipping loadSN2Value"
        else
            #if [ -z "$sdssv_sn2" ]; then
                printAndRun loadSN2Value --update -v ${SOSDir}/${MJD}/$(getSOSSciName $inDir/$fitsName) ${plugDir}/${plugName}
            #else
            #    printAndRun loadSN2Value --update --sdssv_sn2 -v ${SOSDir}/${MJD}/$(getSOSSciName $inDir/$fitsName) ${plugDir}/${plugName}
            #fi
        fi
        printAndRun read_sos ${SOSDir} ${MJD} --no_hash --exp $(getSOSSciName $inDir/$fitsName)
fi
if [[ "$fitsName" == *"b1"* ]] || [[ "$fitsName" == *"b2"* ]]; then
        printAndRun build_combined_html ${SOSDir}
fi
